package ds_algo.dynamic_programming;public class P006_BellNumbersCountDPApproach {    private final int[][] bellNumbers;    private final int maxLimit;    public P006_BellNumbersCountDPApproach(int maxLimit) {        if (maxLimit < 0) {            throw new RuntimeException("Negative input is not allowed");        }        this.maxLimit = maxLimit;        this.bellNumbers = createTree(maxLimit + 1);    }    private int[][] createTree(int n) {        int[][] tree = new int[n + 1][n + 1];        tree[0][0] = 1;        for (int i = 1; i <= n; i++) {            tree[i][0] = tree[i - 1][i - 1];            for (int j = 1; j <= i; j++) {                tree[i][j] = tree[i - 1][j - 1] + tree[i][j - 1];            }        }//        printTree(tree);        return tree;    }    private void printTree(int[][] tree) {        System.out.println();        for (int i = 0; i < tree.length; i++) {            for (int j = 0; j <= i; j++) {                System.out.print(tree[i][j] + " ");            }            System.out.println();        }    }    public int getSetCombinations(int n) {        if (n < 0)            throw new IllegalArgumentException("Should not give negative input");        if (n > maxLimit)            throw new IllegalArgumentException("Input is higher than limit");        if (n == 0)            return 1;        return bellNumbers[n - 1][n - 1];    }}