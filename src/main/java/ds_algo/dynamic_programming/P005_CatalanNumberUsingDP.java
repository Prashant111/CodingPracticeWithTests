package ds_algo.dynamic_programming;import java.util.stream.IntStream;public class P005_CatalanNumberUsingDP {    private final int[][] pascalTree;    private final int maxExpectedInput;    public P005_CatalanNumberUsingDP(int maxExpectedInput) {        if (maxExpectedInput < 0) {            throw new RuntimeException("Negative input is not allowed");        }        this.maxExpectedInput = maxExpectedInput;        int maxLimit = getMaxLimit(maxExpectedInput);        this.pascalTree = createPascalTree(maxLimit + 1);    }    private int getMaxLimit(int x) {        return maximum(x, 2 * x - 2, x + 1);    }    private int maximum(int... numbers) {        return IntStream.of(numbers).max().orElseThrow(() -> new IllegalArgumentException("No Input provided"));    }    private int[][] createPascalTree(int n) {        int[][] tree = new int[n][n];        tree[0][0] = 1;        for (int i = 1; i < n; i++) {            tree[i][0] = 1;            for (int j = 1; j <= i; j++) {                tree[i][j] = tree[i - 1][j - 1] + tree[i - 1][j];            }        }        return tree;    }    public int getCatalanNumber(int n) {        if (n > maxExpectedInput)            throw new IllegalArgumentException("Requested number beyond limit");        if (n <= 1)            return 1;        if (n == 2)            return 2;        return applyFormula(n);    }    private int applyFormula(int x) {        int x1 = 2 * x - 3;        int y1 = x - 1;        int x2 = 2 * x - 3;        int y2 = x;        int x3 = 2 * x - 2;        int y3 = x;        int x4 = 2 * x - 2;        int y4 = x + 1;        int i = pascalTree[x1][y1];        int i1 = pascalTree[x2][y2];        int i2 = pascalTree[x3][y3];        int i3 = pascalTree[x4][y4];        return (i - i1) + (i2 - i3);    }}